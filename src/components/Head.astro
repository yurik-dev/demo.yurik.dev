---
import '@styles/global.css';

import '@fontsource-variable/inter';
import '@fontsource-variable/newsreader';
import '@fontsource/ibm-plex-sans';

import inter from '@fontsource-variable/inter/files/inter-latin-standard-normal.woff2';
import newsreader from '@fontsource-variable/newsreader/files/newsreader-latin-ext-standard-normal.woff2';
import ibmPlex from '@fontsource/ibm-plex-sans/files/ibm-plex-sans-latin-ext-400-normal.woff2';

// TODO: fix view transition implementation
import { ViewTransitions } from 'astro:transitions';

interface Props {
  title: string;
  description: string;
  image?: string;
}

// TODO: add canonical URL for SEO
// const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// TODO: add site preview screenshot image
const { title, description, image } = Astro.props;
---

<!-- Global Metadata -->
<meta charset='UTF-8' />
<meta name='viewport' content='width=device-width,initial-scale=1' />
<link rel='icon' type='image/svg+xml' href='pulbic/favicon-dark.svg' media='(prefers-color-scheme: dark)' />
<link rel='icon' type='image/svg+xml' href='public/favicon-light.svg' media='(prefers-color-scheme: light)' />
<link rel='icon' type='image/x-icon' href='public/favicon-dark.svg' />
<meta name='generator' content={Astro.generator} />

<!-- Font preloads -->
<link rel='preload' href={inter} as='font' type='font/woff2' crossorigin />
<link rel='preload' href={newsreader} as='font' type='font/woff2' crossorigin />
<link rel='preload' href={ibmPlex} as='font' type='font/woff2' crossorigin />

<!-- Canonical URL -->
<!-- <link rel='canonical' href={canonicalURL} /> -->

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name='title' content={title} />
<meta name='description' content={description} />

<!-- Open Graph / Facebook -->
<meta property='og:type' content='website' />
<meta property='og:url' content={Astro.url} />
<meta property='og:title' content={title} />
<meta property='og:description' content={description} />
<!-- <meta property='og:image' content={new URL(image, Astro.url)} /> -->

<!-- Twitter -->
<meta property='twitter:card' content='summary_large_image' />
<meta property='twitter:url' content={Astro.url} />
<meta property='twitter:title' content={title} />
<meta property='twitter:description' content={description} />
<!-- <meta property='twitter:image' content={new URL(image, Astro.url)} /> -->

<!-- <ViewTransitions /> -->

<!-- <script>
  import type { TransitionBeforeSwapEvent } from 'astro:transitions/client';
  document.addEventListener('astro:before-swap', (e) =>
    [...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll('link[as="font"]')].forEach((link) =>
      link.remove(),
    ),
  );
</script> -->

<script is:inline>
  function init() {
    setTheme();
    animate();

    const darkModeBtn = document.getElementById('darkModeBtn');
    darkModeBtn.addEventListener('click', toggleTheme);

    function animate() {
      const animateElements = document.querySelectorAll('.animate');

      animateElements.forEach((element, index) => {
        setTimeout(() => {
          element.classList.add('show');
        }, index * 150);
      });
    }
  }

  function setTheme() {
    let theme;

    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      theme = localStorage.getItem('theme');
    } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      theme = 'dark';
    } else {
      theme = 'light';
    }

    if (theme === 'light') {
      document.documentElement.classList.remove('dark');
    } else {
      document.documentElement.classList.add('dark');
    }

    window.localStorage.setItem('theme', theme);
  }

  function toggleTheme() {
    const element = document.documentElement;
    element.classList.toggle('dark');

    const isDark = element.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  }

  document.addEventListener('DOMContentLoaded', () => init());
  setTheme();
</script>
